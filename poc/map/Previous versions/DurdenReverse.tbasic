'---Script created on 04-25-2020 20:39:06 by
uses "console"
Uses "TBGL"

#include "gameZoneDefinition.tbasicu"

  Type tRiver
      sectorLength as DWORD
      minWidth as DWORD ' actually half width
      maxWidth as DWORD ' actually half width
      banksWidth as Integer
  'average + variance
End Type

  Type tXY
      x as DWORD
      y as DWORD
End Type

  begin Const '
  %NORTH         = 1
  %SOUTH         = 2
  %EAST          = 4
  %WEST         = 8
  end const

  Dim mapDimensions as tXY
  dim myRiver as tRiver
  Dim map as tGameZoneDefinition()
  Dim actualPosition as tXY
  Dim testPosition as tXY
  Dim actualRiverStatus as tRiver
  Dim randomDirection as integer
  Dim moved as Boolean
  Dim compassTurn as Long

  mapDimensions.x = 300
  mapDimensions.y = 300
  myRiver.sectorLength = 10
  myRiver.minWidth = 2
  myRiver.maxWidth = 7
  myRiver.banksWidth = 5
  actualRiverStatus.sectorLength = 1
  actualRiverStatus.minWidth = myRiver.maxWidth

  actualPosition.x = mapDimensions.x - myRiver.maxWidth - myRiver.banksWidth -150
  actualPosition.y = mapDimensions.y - myRiver.maxWidth - myRiver.banksWidth -150

  map.addGameZone(actualPosition.x,actualPosition.y)

  dim hWnd AS DWORD

  hWnd = tbgl_CreateWindowEx("press ESC to quit", 640, 480, 32, %tbgl_WS_WINDOWED or %tbgl_WS_CLOSEBOX)
  tbgl_ShowWindow
  tbgl_ResetKeyState()

  widen

  Randomize (2302) ' 2302

  do

    moved = %FALSE
    randomDirection = rnd(1,4)

    do

      if bitCount(compassTurn) < 3 then

        Select case RandomDirection
          Case 1
          if isDirectionSet(compassTurn, %EAST) then
          endif
            compassTurn = orb(compassTurn , %EAST)
            If actualPosition.x + 3 * actualRiverStatus.minWidth + myRiver.banksWidth > mapDimensions.x Then
              mapDimensions.x += 3 * actualRiverStatus.minWidth + myRiver.banksWidth
            endif
            testPosition = actualPosition
            testPosition.x += 2 * actualRiverStatus.minWidth
            if checkWiden then
              actualPosition.x += 2 * actualRiverStatus.minWidth
              widen
              moved = %TRUE
            endif
          Case 2
            compassTurn = orb(compassTurn , %WEST)
            If not (actualPosition.x - 3 * actualRiverStatus.minWidth - myRiver.banksWidth < 1) Then
              testPosition = actualPosition
              testPosition.x -= 2 * actualRiverStatus.minWidth
              if checkWiden then
                actualPosition.x -= 2 * actualRiverStatus.minWidth
                widen
                moved = %TRUE
              endif
            endif

          Case 3
            compassTurn = orb(compassTurn , %SOUTH)
            If actualPosition.y + 3 * actualRiverStatus.minWidth + myRiver.banksWidth > mapDimensions.y Then
              mapDimensions.y += 3 * actualRiverStatus.minWidth + myRiver.banksWidth
            endif
            testPosition = actualPosition
            testPosition.y += 2 * actualRiverStatus.minWidth
            if checkWiden then
              actualPosition.y += 2 * actualRiverStatus.minWidth
              widen
              moved = %TRUE
            endif
          Case 4
            compassTurn = orb(compassTurn , %NORTH)
            If not (actualPosition.y - 3 * actualRiverStatus.minWidth - myRiver.banksWidth < 1) Then
              testPosition = actualPosition
              testPosition.y -= 2 * actualRiverStatus.minWidth
              if checkWiden then
                actualPosition.y -= 2 * actualRiverStatus.minWidth
                widen
                moved = %TRUE
              endif
            endif
        End Select
        randomDirection = rnd(1,4)
      Else
        randomDirection = CYCLE_Next(randomDirection,1,4)
      End If
    loop while moved <> %TRUE

    incr actualRiverStatus.sectorLength

    if actualRiverStatus.sectorLength > myRiver.sectorLength Then
      actualRiverStatus.sectorLength = 1
      Decr actualRiverStatus.minWidth
    endif

    printl "actualRiverStatus.sectorLength = " & actualRiverStatus.sectorLength, "actualRiverStatus.minWidth = " & actualRiverStatus.minWidth

    call drawing

  loop while actualRiverStatus.minWidth >= myRiver.minWidth

  msgbox 0 , mapDimensions.x & " x " & mapDimensions.y, , "Done."

' -- Main loop
  While tbgl_IsWindow(hWnd)

    call drawing

' -- ESCAPE key to exit application
    If tbgl_GetWindowKeyState(hWnd, %VK_ESCAPE) Then Exit While

  Wend

  tbgl_DestroyWindow

Function drawing()

' -- Set the resolution and the coordinate system
  tbgl_Rendermatrix2D (0,480,640,0)
  tbgl_ClearFrame

' -- Draw river map
  map.Render()

'Show the rendered stuff to the public :)
  tbgl_DrawFrame

End Function

function widen()
  for u as Long = (actualPosition.y - actualRiverStatus.minWidth) to (actualPosition.y + actualRiverStatus.minWidth)
    for v as Long = (actualPosition.x - actualRiverStatus.minWidth) to (actualPosition.x + actualRiverStatus.minWidth)
      map.addGameZone(v,u)
    next
  next

  map.addWaypoint(actualPosition.x+1, actualPosition.y+1)

End Function

function checkWiden()
  checkWiden = %TRUE
  local minx as long = testPosition.x - actualRiverStatus.minWidth - myRiver.banksWidth
  Local miny as long = testPosition.y - actualRiverStatus.minWidth - myRiver.banksWidth
  Local maxx as Long = testPosition.x + actualRiverStatus.minWidth + myRiver.banksWidth
  Local maxy as long = testPosition.y + actualRiverStatus.minWidth + myRiver.banksWidth

  select case randomDirection
    Case 1
      minx = testPosition.x + actualRiverStatus.minWidth
    Case 2
      maxx = testPosition.x - actualRiverStatus.minWidth
    Case 3
      miny = testPosition.y + actualRiverStatus.minWidth
    Case 4
      maxy = testPosition.y - actualRiverStatus.minWidth
  End Select

  for l as Long = miny to maxy
    for k as Long = minx to maxx
      if map.isGameZone(k,l) Then
        return %FALSE
      endif
    next
  next
End Function

function isDirectionSet(compass as long, direction as long) as long
  return bit_get(compass, log2(direction))
end function

Function bitCount(Storage as Long) as Long
  Return Tally(bin$(Storage), "1")
End Function