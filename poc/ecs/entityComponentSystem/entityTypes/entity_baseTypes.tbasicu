' --

type tVector2
  x as Float32
  y as Float32
end type

type tPosition
  tVector2
  
  lastX as float32
  lastY as float32
end type

type tEntityBase
  typeName      as asciiz * 32
  entityAbility as int32
  
  position      as tPosition
  rotation      as Float32
  
  function hasAbility(ability as int32) as int32
    return Bit_get(me.entityAbility, Log2(ability)) 
  end function
end type

' --

begin const
  %ECS_FORCEAREA_CIRCULAR = 1
end const

type TEntity_ForceArea_Base
  tEntityBase

  areaType  as int32
  areaData  as dword
  baseForce as float32
end type

' --

type tPhysicsBase
  mass     as float32   '[todo] Incorporate to physics/collision calculations
  force    as tVector2
  spin     as float32
  
  function Initialize(mass as float32)
    me.mass = mass
  end function
End type

' --

type tColliderBase
  typeName    as asciiz * 32
  
  bounciness  as Float32
end type

type tBoundingCircle
  tColliderBase
  
	radius   as Float32
	
  function Initialize(radius as float32)
    me.typeName = remain$(typeof(me), ".") ' Cuts the udt. start
    
    me.radius   = radius
  End Function
End Type
