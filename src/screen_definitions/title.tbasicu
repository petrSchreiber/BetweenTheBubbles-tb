#include once "../ui/textitem.tbasicu"
#Include ONCE "../smartTexture.tbasicu" ' https://github.com/petrSchreiber/SmartTexture

'[t] Include Once inconsistent
' https://www.thinbasic.com/public/products/thinBasic/help/html/include.htm says
' "FileName" can have a full or relative path. Relative paths are always considered relative to the main script.

  type ScreenTitle
  
      contextPtr as UInt32
      proposedScreenChange        as string
      proposedScreenChangeReason  as string
  
      titleFont   as UInt32
      menuFont    as UInt32
  
      titleText   as TextItem
      playText    as TextItem
      quitText    as TextItem
  
  'Backgroung animation
      VertexS(%SIDE*%SIDE*4) As TBGL_tVector3F
      ColorS(%SIDE*%SIDE*4) As TBGL_tRGB
      ColorStart as TBGL_TRGB
      ColorTo as TBGL_TRGB
      gbQuad As DWord
  
      balayx as integer
      balayy as Integer
      balaytogo as Integer
      balayfromgo as integer
      balayup as boolean
      balayw2 as boolean
  
      balay2x as integer
      balay2y as Integer
      balay2togo as Integer
      balay2fromgo as integer
      balay2up as boolean
      balay2w2 as boolean
  
      balay3x as integer
      balay3y as Integer
      balay3togo as Integer
      balay3fromgo as integer
      balay3up as boolean
  
  'Title animation
      boosted as Boolean
      counterT as DWord
      stopbubbles as dword
      Bubble1(%MAXBUBBLES+%BOOST) as tBubbleSprite
      Bubble2(%BOOST) as tBubbleSprite
  
      t as SmartTexture
      t2 as SmartTexture
  
  function prepare(contextPtr as UInt32, optional screenChangeReason as string)
      me.contextPtr = contextPtr
      dim metadata as GameContext at me.contextPtr
  
      tbgl_backColor 128, 128, 255
  
      me.titleFont = tbgl_fontHandle("Arial", metadata.screenHeight/22)
      tbgl_buildFont(me.titleFont, 1)
  
      me.titleText.put("Between the Bubbles", 1)
  
      me.menuFont = tbgl_fontHandle("Arial", metadata.screenHeight/30)
      tbgl_buildFont(me.menuFont, 2)
  
      me.playText.put("[P]lay", 2)
      me.quitText.put("[Q]uit", 2)
  
  'Backgroung animation   
      with me
      .ColorTo.r = %CTR
      .ColorTo.g = %CTG
      .ColorTo.b = %CTB
      .ColorStart.r = %CSR
      .ColorStart.g = %CSG
      .ColorStart.b = %CSB
  
      .balayX = 1
      .balayy = 1
      .balaytogo = 1
      .balayfromgo = 2
      .balayup = %TRUE
      .balayw2 = %FALSE
  
      .balay2X = 1
      .balay2y = 1
      .balay2togo = 1
      .balay2fromgo = 2
      .balay2up = %TRUE
      .balay2w2 = %FALSE
  
      .balay3X = 1
      .balay3y = 1
      .balay3togo = 1
      .balay3fromgo = 2
      .balay3up = %TRUE
  
      end with
  
      me.gbQuad = TBGL_GBufferCreate(%TBGL_Quads, %TBGL_3D)
      Me.makeplane
  
  '[t] next line won't work with (me.)
  'TBGL_GBufferDefineFromArray(me.gbQuad, %TBGL_Dynamic, %SIDE*%SIDE*4, me.VertexS(1), me.ColorS(1))
  
  '[t] next line won't work either
  'GBufferDefineFromArrayFunc(varptr(me.gbQuad), varptr(me.VertexS(1).x), varptr(me.ColorS(1).r))
  '(see function lower)
  
  'Title animation
      me.t.FromFile(APP_ScriptPath & $TITLEPNG)
      me.t.Make(1, %TBGL_TEX_MIPMAP)
      me.t2.FromFile(APP_ScriptPath & $TITLESPRITEPNG)
      me.t2.Make(2, %TBGL_TEX_MIPMAP)
  
      me.InitBubbles
  
  end function
  
  function cleanup()
      tbgl_backColor 0, 0, 0
  
      tbgl_killFont(2)
      tbgl_killFont(1)
  end function
  
  '
  
  function handleInput()
      dim metadata as GameContext at me.contextPtr
  
      if tbgl_getWindowKeyOnce(metadata.screenWindow, %VK_Q) then metadata.gameRunning = FALSE
  
      if tbgl_getWindowKeyOnce(metadata.screenWindow, %VK_P) then me.proposedScreenChange = "game"
  end function
  
  function render()
      dim metadata as GameContext at me.contextPtr
  
      tbgl_clearFrame
  
      TBGL_Camera(0, 0,%SIDE, 0, 0, 0)
  
      me.RenderBubbles
  
  'Commented out while TBGL_GBufferDefineFromArray instruction need fix
  'if me.balay then Memory_Swap(VarPtr(me.colorTo.r), VarPtr(me.colorStart.r), SizeOf(TBGL_TRGB))
  
      me.titleText.render(metadata.screenWidth/2 - me.titleText.width/2, metadata.screenHeight*0.75 - me.titleText.height/2 + sin(metadata.gameTime) * metadata.screenHeight/40)
  
      me.playText.render(metadata.screenWidth/2 - me.playText.width/2, metadata.screenHeight*0.5 - me.playText.height/2)
      me.quitText.render(metadata.screenWidth/2 - me.quitText.width/2, metadata.screenHeight*0.4 - me.quitText.height/2)
  
      tbgl_drawFrame
  end function
  
  function changeTo() as string
      return me.proposedScreenChange
  end function
  
  function changeReason() as string
      return me.proposedScreenChangeReason
  end function
  
  function makePlane()
  
      Local y as single value = 0.5 - %SIDE/2
      Local x as single Value = 0.5 - %SIDE/2
  
    for i as long = 1 to %SIDE*%SIDE*4 step 4
      with me
      .VertexS(i).x=x-0.5
      .VertexS(i).y=y-0.5
      .VertexS(i+1).x=x+0.5
      .VertexS(i+1).y=y-0.5
      .VertexS(i+2).x=x+0.5
      .VertexS(i+2).y=y+0.5
      .VertexS(i+3).x=x-0.5
      .VertexS(i+3).y=y+0.5

      .ColorS(i).r =  .ColorStart.r
      .ColorS(i).g = .ColorStart.g
      .ColorS(i).b = .ColorStart.b
      .ColorS(i+1).r = .ColorStart.r
      .ColorS(i+1).g = .ColorStart.g
      .ColorS(i+1).b = .ColorStart.b
      .ColorS(i+2).r = .ColorStart.r
      .ColorS(i+2).g = .ColorStart.g
      .ColorS(i+2).b = .ColorStart.b
      .ColorS(i+3).r =  .ColorStart.r
      .ColorS(i+3).g = .ColorStart.g
      .ColorS(i+3).b = .ColorStart.b
      end with
      incr y

      if y > %SIDE/2 Then
        incr X
        y= 0.5 - %SIDE/2
      endif

      next
  
  end function
  
  ' to the right X
  ' to the top Y
  ' ahead Z
  
  function wave1(quadId as integer) as Boolean
      with me
      local rok, gok, bok as Boolean
  
    if .ColorS(quadId+2).r < .ColorTo.r then
      incr .ColorS(quadId+2).r
    ElseIf .ColorS(quadId+2).r > .ColorTo.r then
      Decr .ColorS(quadId+2).r
  Else
      rok = %TRUE
      endif
    if .ColorS(quadId+2).g < .ColorTo.g then
      incr .ColorS(quadId+2).g
    ElseIf .ColorS(quadId+2).g > .ColorTo.g then
      Decr .ColorS(quadId+2).g
  Else
      gok = %TRUE
      endif
    if .ColorS(quadId+2).b < .ColorTo.b then
      incr .ColorS(quadId+2).b
    ElseIf .ColorS(quadId+2).b > .ColorTo.b then
      Decr .ColorS(quadId+2).b
  Else
      bok = %TRUE
      endif
  
      Return (rok and gok and bok)
      end with
  end function
  
  Function wave2(quadId as integer) as Boolean
      with me
      local rok, gok, bok, rok2, gok2, bok2 as Boolean
  
    if .ColorS(quadId+1).r < .ColorTo.r Then
      incr .ColorS(quadId+1).r
    elseif .ColorS(quadId+1).r > .ColorTo.r then
      decr .ColorS(quadId+1).r
  Else
      rok = %TRUE
      EndIf
    if .ColorS(quadId+1).g < .ColorTo.g Then
      incr .ColorS(quadId+1).g
    elseif .ColorS(quadId+1).g > .ColorTo.g then
      decr .ColorS(quadId+1).g
  Else
      gok = %TRUE
      EndIf
    if .ColorS(quadId+1).b < .ColorTo.b Then
      incr .ColorS(quadId+1).b
    elseif .ColorS(quadId+1).b > .ColorTo.b then
      decr .ColorS(quadId+1).b
  Else
      bok = %TRUE
      EndIf
    if .ColorS(quadId+3).r < .ColorTo.r Then
      incr .ColorS(quadId+3).r
    elseif .ColorS(quadId+3).r > .ColorTo.r then
      decr .ColorS(quadId+3).r
  Else
      rok2 = %TRUE
      EndIf
    if .ColorS(quadId+3).g < .ColorTo.g Then
      incr .ColorS(quadId+3).g
    elseif .ColorS(quadId+3).g > .ColorTo.g then
      decr .ColorS(quadId+3).g
  Else
      gok2 = %TRUE
      EndIf
    if .ColorS(quadId+3).b < .ColorTo.b Then
      incr .ColorS(quadId+3).b
    elseif .ColorS(quadId+3).b > .ColorTo.b then
      decr .ColorS(quadId+3).b
  Else
      bok2 = %TRUE
      EndIf
  
      Return (rok and gok and bok and rok2 and gok2 and bok2)
      end with
  end function
  
  Function wave3(quadId as integer) as Boolean
      WITH ME
      local rok, gok, bok as Boolean
  
    if .ColorS(quadId).r < .ColorTo.r Then
      incr .ColorS(quadId).r
    elseif .ColorS(quadId).r > .ColorTo.r then
      decr .ColorS(quadId).r
  Else
      rok = %TRUE
      EndIf
    if .ColorS(quadId).g < .ColorTo.g Then
      incr .ColorS(quadId).g
    elseif .ColorS(quadId).g > .ColorTo.g then
      decr .ColorS(quadId).g
  Else
      gok = %TRUE
      EndIf
    if .ColorS(quadId).b < .ColorTo.b Then
      incr .ColorS(quadId).b
    elseif .ColorS(quadId).b > .ColorTo.b then
      decr .ColorS(quadId).b
  Else
      bok = %TRUE
      EndIf
  
      Return (rok and gok and bok)
      END WITH
  end function
  
  function quadid(x as integer, y as integer) as integer
      return (x-1)*4*%SIDE + (y-1)*4 +1
  end function
  
  function balay() as Boolean
      with me
    if .balayup Then
      for i as integer = 1 to .balaytogo

        .balayx = i
        .balayy = 1 + .balaytogo - i

        if .wave1(.quadId(.balayx,.balayy)) Then
          incr .balayX
          decr .balayy
          .balayw2 = %TRUE
          if .balayx > .balaytogo  Then
            incr .balaytogo
            if .balaytogo > %SIDE then
              .balayup = %FALSE
              .balaytogo = %SIDE
            endif
          endif
        endif

      next
  else
      for i as integer = .balayfromgo to .balaytogo

        x = i
        y = .balayfromgo + .balaytogo - i

        if .wave1(.quadId(.balayx,.balayy)) Then
          incr .balayX
          decr .balayy
          if .balayx > .balaytogo  Then
            incr .balayfromgo
          endif
        endif

      next
      end if
    if .balayw2 then
      if .balay2 then
        .balayup = %TRUE
        .balayx=1
        .balayy=1
        .balaytogo=1
        .balayfromgo=2
        .balayw2 = %FALSE
        return %TRUE
      EndIf
      endif
      end with
  end function
  
  function balay2() as Boolean
      with me
    if .balay2up Then
      for i as integer = 1 to .balay2togo

        .balay2x = i
        .balay2y = 1 + .balay2togo - i

        if .wave2(.quadId(.balay2x,.balay2y)) Then
          incr .balay2X
          decr .balay2y
          .balay2w2 = %TRUE
          if .balay2x > .balay2togo  Then
            incr .balay2togo
            if .balay2togo > %SIDE then
              .balay2up = %FALSE
              .balay2togo = %SIDE
            endif
          endif
        endif

      next
  else
      for i as integer = .balay2fromgo to .balay2togo

        .balay2x = i
        .balay2y = .balay2fromgo + .balay2togo - i

        if .wave2(.quadId(.balay2x,.balay2y)) Then
          incr .balay2X
          decr .balay2y
          if .balay2x > .balay2togo  Then
            incr .balay2fromgo
          endif
        endif

      next
      end if
    if .balay2w2 then
      if .balay3 then
        .balay2x = 1
        .balay2y = 1
        .balay2togo = 1
        .balay2fromgo = 2
        .balay2up = %TRUE
        .balay2w2 = %FALSE
        return %TRUE
      endif
      endif
      end with
  end function
  
  function balay3() as Boolean
      WITH ME
    if .balay3up Then
      for i as integer = 1 to .balay3togo

        .balay3x = i
        .balay3y = 1 + .balay3togo - i

        if .wave3(.quadId(.balay3x,.balay3y)) Then
          incr .balay3x
          decr .balay3y

          if .balay3x > .balay3togo  Then
            incr .balay3togo
            if .balay3togo > %SIDE then
              .balay3up = %FALSE
              .balay3togo = %SIDE
            endif
          endif
        endif

      next
  else
      for i as integer = .balay3fromgo to .balay3togo

        .balay3x = i
        .balay3y = .balay3fromgo + .balay3togo - i

        if .wave3(.quadId(.balay3x,.balay3y)) Then
          incr .balay3x
          decr .balay3y
          if .balay3x > .balay3togo  Then
            incr .balay3fromgo
            if .balay3fromgo > %SIDE then
              .balay3up = %TRUE
              .balay3x = 1
              .balay3y = 1
              .balay3togo = 1
              .balay3fromgo = 2
              .balay3up = %TRUE
              return %TRUE
            endif
          endif
        endif
      next
      end if
      END WITH
  end function
  
  Function InitBubbles( ) as long
    For i as integer = 1 to %MAXBUBBLES
      FB_BornBubble(me.Bubble1(1),i)
      next
    For i as integer = 1 to %BOOST
      FB_BornBubble(me.Bubble2(1),i)
      next
  end function
  
  function RenderBubbles () as long
      Local metadata as GameContext at me.contextPtr
    if me.counterT < %TIMETITLE then
      incr me.counterT
  Else
      me.drawtitle
      end if
  
    if me.counterT < %TIMEBOOST then

  Else

      FB_MoveBubble(me.Bubble2(1),metadata.Framerate,%BOOST,False)
      for i as integer = 1 to %BOOST
        me.DrawBubble2(i)
      next

      end if
  
      FB_MoveBubble(me.Bubble1(1),metadata.Framerate,%MAXBUBBLES,true)
    for i as integer = 1 to %MAXBUBBLES
      me.DrawBubble(i)
      next
  
  end function


  ' Renders single bubble
  fUNCTION DrawBubble (index as long) as long
  
      tbgl_pushTexture(2)
      tbgl_pushAlphaFunc(%TBGL_GREATER, 0.66)
      tbgl_PushMatrix
  
      tbgl_Translate me.Bubble1(index).x, me.Bubble1(index).y, me.Bubble1(index).z
  
      tbgl_BeginPoly %GL_Quads
  
      tbgl_TexCoord2D 0,1
      tbgl_Vertex -me.Bubble1(index).Size,me.Bubble1(index).Size,0
  
      tbgl_TexCoord2D 1,1
      tbgl_Vertex  me.Bubble1(index).Size,me.Bubble1(index).Size,0
  
      tbgl_TexCoord2D 1,0
      tbgl_Vertex  me.Bubble1(index).Size,-me.Bubble1(index).Size,0
  
      tbgl_TexCoord2D 0,0
      tbgl_Vertex -me.Bubble1(index).Size,-me.Bubble1(index).Size,0
  
      tbgl_EndPoly
  
      tbgl_PopMatrix
      tbgl_popAlphaFunc
      tbgl_popTexture
      
  end function
  
  fUNCTION DrawBubble2 (index as long) as long
  
      tbgl_pushTexture(2)
      tbgl_pushAlphaFunc(%TBGL_GREATER, 0.66)
      tbgl_PushMatrix
  
      tbgl_Translate me.Bubble2(index).x, me.Bubble2(index).y, me.Bubble2(index).z
  
      tbgl_BeginPoly %GL_Quads
  
      tbgl_TexCoord2D 0,1
      tbgl_Vertex -me.Bubble2(index).Size,me.Bubble2(index).Size,0
  
      tbgl_TexCoord2D 1,1
      tbgl_Vertex  me.Bubble2(index).Size,me.Bubble2(index).Size,0
  
      tbgl_TexCoord2D 1,0
      tbgl_Vertex  me.Bubble2(index).Size,-me.Bubble2(index).Size,0
  
      tbgl_TexCoord2D 0,0
      tbgl_Vertex -me.Bubble2(index).Size,-me.Bubble2(index).Size,0
  
      tbgl_EndPoly
  
      tbgl_PopMatrix
      tbgl_popAlphaFunc
      tbgl_popTexture
  
  end function
  
  fUNCTION DrawTitle () as long
  '[todo] Fade in
  
      tbgl_PushMatrix
      tbgl_pushTexture(1)
      tbgl_pushAlphaFunc(%TBGL_GREATER, 0.66)
  
      tbgl_Translate 0, 0, 0
  
      tbgl_BeginPoly %GL_Quads
  
      tbgl_TexCoord2D 0,1
      tbgl_Vertex -3,3,-4
  
      tbgl_TexCoord2D 1,1
      tbgl_Vertex 3,3,-4
  
      tbgl_TexCoord2D 1,0
      tbgl_Vertex 3,-3,-4
  
      tbgl_TexCoord2D 0,0
      tbgl_Vertex -3,-3,-4
  
      tbgl_EndPoly
  
      tbgl_popAlphaFunc
      tbgl_popTexture
      tbgl_PopMatrix
  
  end function
  
end type

function GBufferDefineFromArrayFunc(gbQuad , VertexS , ColorS )
'[t] workaround attempt
  local G as dword at gbQuad
  local v(%SIDE*%SIDE*4) as TBGL_tVector3F at VertexS
  local c(%SIDE*%SIDE*4) as TBGL_tRGB at ColorS

  TBGL_GBufferDefineFromArray(g, %TBGL_Dynamic, %SIDE*%SIDE*4 , v, c)

end Function

  dim uScreenTitle as ScreenTitle

function screen_title_prepare(metadata as UInt32, screenChangeReason as string)
  reset uScreenTitle
  uScreenTitle.prepare(metadata, screenChangeReason)
end function

function screen_title_cleanup()
  uScreenTitle.cleanup()
end function

'

function screen_title_handleInput()
  uScreenTitle.handleInput()
end function

function screen_title_render()
  uScreenTitle.render()
end function

function screen_title_changeTo() as string
  return uScreenTitle.changeTo()
end function

function screen_title_changeReason() as string
  return uScreenTitle.changeReason()
end function
