'[todo] add customLayout support (Bezier points list)
'[] O2 optimization possible


Begin Const, %Ease_ ' Equates for signalLayout
  %linear
  %quadractic
  %cubic
  %beziercubic
End Const

Type points ' Describes Bezier control points
  x as Single
  y as Single
end type


Type easing 

  dim signalLayout as Integer ' Layout of the easing, DEFAULT = 0 (LINEAR)
  dim reverse as Boolean ' True for right-left-mirrored easing, DEFAULT = False
  dim fullValue as single ' 100% output value, DEFAULT = 1
  dim duration as single ' stretch / shrink, DEFAULT = 1
  dim maxValue as single ' internal calculated fullValue before resize
  dim Bezier() as points ' Store Bezier control points
 

  Function init(signalLayout as int = 0, reverse as boolean = FALSE, fullValue as single = 1, duration as single = 1, Optional Bezier() as points) as Boolean 
    if signalLayout >= 0 and signalLayout <= 3 and duration > 0 then
      me.signalLayout = signalLayout
      me.reverse = reverse
      me.fullValue = fullValue
      me.duration = duration
      select case signalLayout
      case 0 ' linear
        me.maxValue = 1 'not used
      case 1 ' quadratic
        me.maxValue = Pow2(fullValue)
      case 2 ' cubic
        me.maxValue = Pow3(fullValue)
      case 3 ' cubic bezier
        if Function_CParams <> 1 then Return FALSE 'Optional parameter was not provided
        if ubound(Bezier) < 2) then Return FALSE 'Beziers need at least two control points 
      end Select
      Return true
    else
      Return false
    endif
  end function
   


  function ease(timePos as single) as Single
  
    if timePos < 0 or timePos > me.duration or not(me.init) then
      'parameter is invalid
      ease = 0
    else
    
      if me.reverse then timePos = me.duration - timePos
      ease = me.fullValue*timePos/me.duration
      
      select case me.signalLayout
      case 0 ' linear        
        'ease = ease
      case 1 ' quadratic
        ease = me.fullValue*Pow2(ease)/me.maxValue
      case 2 ' cubic
        ease = me.fullValue*Pow3(ease)/me.maxValue
      case 3 ' cubic bezier
      '[todo] Compute Bezier path
        ease = 0 
      end select
    endif
    
    return ease
    
  end function
  
end type
